var S = Object.defineProperty;
var P = (s, a, t) => a in s ? S(s, a, { enumerable: !0, configurable: !0, writable: !0, value: t }) : s[a] = t;
var i = (s, a, t) => (P(s, typeof a != "symbol" ? a + "" : a, t), t);

// src/event.ts
function r(s, a = null) {
  let t = new Event(s);
  return a && Object.defineProperty(t, "task", {
    value: a,
    enumerable: !0,
    writable: !1,
    configurable: !1
  }), t;
}

// src/constants.ts
var C = {
  1: 12.71,
  2: 4.303,
  3: 3.182,
  4: 2.776,
  5: 2.571,
  6: 2.447,
  7: 2.365,
  8: 2.306,
  9: 2.262,
  10: 2.228,
  11: 2.201,
  12: 2.179,
  13: 2.16,
  14: 2.145,
  15: 2.131,
  16: 2.12,
  17: 2.11,
  18: 2.101,
  19: 2.093,
  20: 2.086,
  21: 2.08,
  22: 2.074,
  23: 2.069,
  24: 2.064,
  25: 2.06,
  26: 2.056,
  27: 2.052,
  28: 2.048,
  29: 2.045,
  30: 2.042,
  31: 2.0399,
  32: 2.0378,
  33: 2.0357,
  34: 2.0336,
  35: 2.0315,
  36: 2.0294,
  37: 2.0273,
  38: 2.0252,
  39: 2.0231,
  40: 2.021,
  41: 2.0198,
  42: 2.0186,
  43: 2.0174,
  44: 2.0162,
  45: 2.015,
  46: 2.0138,
  47: 2.0126,
  48: 2.0114,
  49: 2.0102,
  50: 2.009,
  51: 2.0081,
  52: 2.0072,
  53: 2.0063,
  54: 2.0054,
  55: 2.0045,
  56: 2.0036,
  57: 2.0027,
  58: 2.0018,
  59: 2.0009,
  60: 2,
  61: 1.9995,
  62: 1.999,
  63: 1.9985,
  64: 1.998,
  65: 1.9975,
  66: 1.997,
  67: 1.9965,
  68: 1.996,
  69: 1.9955,
  70: 1.995,
  71: 1.9945,
  72: 1.994,
  73: 1.9935,
  74: 1.993,
  75: 1.9925,
  76: 1.992,
  77: 1.9915,
  78: 1.991,
  79: 1.9905,
  80: 1.99,
  81: 1.9897,
  82: 1.9894,
  83: 1.9891,
  84: 1.9888,
  85: 1.9885,
  86: 1.9882,
  87: 1.9879,
  88: 1.9876,
  89: 1.9873,
  90: 1.987,
  91: 1.9867,
  92: 1.9864,
  93: 1.9861,
  94: 1.9858,
  95: 1.9855,
  96: 1.9852,
  97: 1.9849,
  98: 1.9846,
  99: 1.9843,
  100: 1.984,
  101: 1.9838,
  102: 1.9836,
  103: 1.9834,
  104: 1.9832,
  105: 1.983,
  106: 1.9828,
  107: 1.9826,
  108: 1.9824,
  109: 1.9822,
  110: 1.982,
  111: 1.9818,
  112: 1.9816,
  113: 1.9814,
  114: 1.9812,
  115: 1.9819,
  116: 1.9808,
  117: 1.9806,
  118: 1.9804,
  119: 1.9802,
  120: 1.98,
  infinity: 1.96
}, g = C;

// src/utils.ts
var H = (s) => s / 1e6, j = () => H(Number(process.hrtime.bigint())), b = () => performance.now();
function z(s) {
  return s !== null && typeof s == "object" && typeof s.then == "function";
}
var M = (s, a) => s.reduce((e, n) => e + (n - a) ** 2, 0) / (s.length - 1) || 0, q = (async () => {
}).constructor, V = (s) => s.constructor === q, O = async (s) => {
  if (V(s.fn))
    return !0;
  try {
    if (s.opts.beforeEach != null)
      try {
        await s.opts.beforeEach.call(s);
      } catch (e) {
      }
    let a = s.fn(), t = z(a);
    if (t)
      try {
        await a;
      } catch (e) {
      }
    if (s.opts.afterEach != null)
      try {
        await s.opts.afterEach.call(s);
      } catch (e) {
      }
    return t;
  } catch (a) {
    return !1;
  }
};

// src/task.ts
var p = class extends EventTarget {
  constructor(t, e, n, o = {}) {
    super();
    i(this, "bench");
    i(this, "name");
    i(this, "fn");
    i(this, "runs", 0);
    i(this, "result");
    i(this, "opts");
    this.bench = t, this.name = e, this.fn = n, this.opts = o;
  }
  async loop(t, e) {
    var l;
    let n = 0, o = [];
    if (this.opts.beforeAll != null)
      try {
        await this.opts.beforeAll.call(this);
      } catch (h) {
        return { error: h };
      }
    let u = await O(this);
    try {
      for (; (n < t || o.length < e) && !((l = this.bench.signal) != null && l.aborted); ) {
        this.opts.beforeEach != null && await this.opts.beforeEach.call(this);
        let h = 0;
        if (u) {
          let c = this.bench.now();
          await this.fn.call(this), h = this.bench.now() - c;
        } else {
          let c = this.bench.now();
          this.fn.call(this), h = this.bench.now() - c;
        }
        o.push(h), n += h, this.opts.afterEach != null && await this.opts.afterEach.call(this);
      }
    } catch (h) {
      return { error: h };
    }
    if (this.opts.afterAll != null)
      try {
        await this.opts.afterAll.call(this);
      } catch (h) {
        return { error: h };
      }
    return { samples: o };
  }
  async run() {
    var n, o;
    if ((n = this.result) != null && n.error)
      return this;
    this.dispatchEvent(r("start", this)), await this.bench.setup(this, "run");
    let { samples: t, error: e } = await this.loop(this.bench.time, this.bench.iterations);
    if (this.bench.teardown(this, "run"), t) {
      let u = t.reduce((E, T) => E + T, 0);
      this.runs = t.length, t.sort((E, T) => E - T);
      let l = u / this.runs, h = 1e3 / l, c = t.length, m = c - 1, F = t[0], R = t[m], w = u / t.length || 0, k = M(t, w), y = Math.sqrt(k), x = y / Math.sqrt(c), A = g[String(Math.round(m) || 1)] || g.infinity, L = x * A, B = L / w * 100, _ = t[Math.ceil(c * 0.75) - 1], K = t[Math.ceil(c * 0.99) - 1], N = t[Math.ceil(c * 0.995) - 1], I = t[Math.ceil(c * 0.999) - 1];
      if ((o = this.bench.signal) != null && o.aborted)
        return this;
      this.setResult({
        totalTime: u,
        min: F,
        max: R,
        hz: h,
        period: l,
        samples: t,
        mean: w,
        variance: k,
        sd: y,
        sem: x,
        df: m,
        critical: A,
        moe: L,
        rme: B,
        p75: _,
        p99: K,
        p995: N,
        p999: I
      });
    }
    if (e) {
      if (this.setResult({ error: e }), this.bench.throws)
        throw e;
      this.dispatchEvent(r("error", this)), this.bench.dispatchEvent(r("error", this));
    }
    return this.dispatchEvent(r("cycle", this)), this.bench.dispatchEvent(r("cycle", this)), this.dispatchEvent(r("complete", this)), this;
  }
  async warmup() {
    var e;
    if ((e = this.result) != null && e.error)
      return;
    this.dispatchEvent(r("warmup", this)), await this.bench.setup(this, "warmup");
    let { error: t } = await this.loop(this.bench.warmupTime, this.bench.warmupIterations);
    if (this.bench.teardown(this, "warmup"), t && (this.setResult({ error: t }), this.bench.throws))
      throw t;
  }
  addEventListener(t, e, n) {
    super.addEventListener(t, e, n);
  }
  removeEventListener(t, e, n) {
    super.removeEventListener(t, e, n);
  }
  setResult(t) {
    this.result = { ...this.result, ...t }, Object.freeze(this.result);
  }
  reset() {
    this.dispatchEvent(r("reset", this)), this.runs = 0, this.result = void 0;
  }
};

// src/bench.ts
var v = class extends EventTarget {
  constructor(t = {}) {
    var e, n, o, u, l, h, c, m;
    super();
    i(this, "_tasks", /* @__PURE__ */ new Map());
    i(this, "_todos", /* @__PURE__ */ new Map());
    i(this, "signal");
    i(this, "throws");
    i(this, "warmupTime", 100);
    i(this, "warmupIterations", 5);
    i(this, "time", 500);
    i(this, "iterations", 10);
    i(this, "now", b);
    i(this, "setup");
    i(this, "teardown");
    this.now = (e = t.now) != null ? e : this.now, this.warmupTime = (n = t.warmupTime) != null ? n : this.warmupTime, this.warmupIterations = (o = t.warmupIterations) != null ? o : this.warmupIterations, this.time = (u = t.time) != null ? u : this.time, this.iterations = (l = t.iterations) != null ? l : this.iterations, this.signal = t.signal, this.throws = (h = t.throws) != null ? h : !1, this.setup = (c = t.setup) != null ? c : () => {
    }, this.teardown = (m = t.teardown) != null ? m : () => {
    }, this.signal && this.signal.addEventListener(
      "abort",
      () => {
        this.dispatchEvent(r("abort"));
      },
      { once: !0 }
    );
  }
  runTask(t) {
    var e;
    return (e = this.signal) != null && e.aborted ? t : t.run();
  }
  async run() {
    this.dispatchEvent(r("start"));
    let t = [];
    for (let e of [...this._tasks.values()])
      t.push(await this.runTask(e));
    return this.dispatchEvent(r("complete")), t;
  }
  async runConcurrently(t = 1 / 0) {
    this.dispatchEvent(r("start"));
    let e = [...this._tasks.values()], n = [];
    return await (async () => {
      for (; e.length > 0; ) {
        let u = [];
        for (; u.length < t && e.length > 0; ) {
          let h = e.pop();
          u.push(this.runTask(h));
        }
        let l = await Promise.all(u);
        n.push(...l);
      }
    })(), this.dispatchEvent(r("complete")), n;
  }
  async warmup() {
    this.dispatchEvent(r("warmup"));
    for (let [, t] of this._tasks)
      await t.warmup();
  }
  reset() {
    this.dispatchEvent(r("reset")), this._tasks.forEach((t) => {
      t.reset();
    });
  }
  add(t, e, n = {}) {
    let o = new p(this, t, e, n);
    return this._tasks.set(t, o), this.dispatchEvent(r("add", o)), this;
  }
  todo(t, e = () => {
  }, n = {}) {
    let o = new p(this, t, e, n);
    return this._todos.set(t, o), this.dispatchEvent(r("todo", o)), this;
  }
  remove(t) {
    let e = this.getTask(t);
    return e && (this.dispatchEvent(r("remove", e)), this._tasks.delete(t)), this;
  }
  addEventListener(t, e, n) {
    super.addEventListener(t, e, n);
  }
  removeEventListener(t, e, n) {
    super.removeEventListener(t, e, n);
  }
  table(t) {
    return this.tasks.map((e) => {
      if (e.result) {
        if (e.result.error)
          throw e.result.error;
        return (t == null ? void 0 : t(e)) || {
          "Task Name": e.name,
          "ops/sec": e.result.error ? "NaN" : parseInt(e.result.hz.toString(), 10).toLocaleString(),
          "Average Time (ns)": e.result.error ? "NaN" : e.result.mean * 1e3 * 1e3,
          Margin: e.result.error ? "NaN" : `\xB1${e.result.rme.toFixed(2)}%`,
          Samples: e.result.error ? "NaN" : e.result.samples.length
        };
      }
      return null;
    });
  }
  get results() {
    return [...this._tasks.values()].map((t) => t.result);
  }
  get tasks() {
    return [...this._tasks.values()];
  }
  get todos() {
    return [...this._todos.values()];
  }
  getTask(t) {
    return this._tasks.get(t);
  }
};

// src/index.ts
var rt = v;
export {
  v as Bench,
  p as Task,
  rt as default,
  j as hrtimeNow,
  b as now
};
